name: Github CI

on: push

env:
  DOCKER_IMAGE_NAME: fredrikfornwall/advent-of-code
  SERVER_DOCKER_IMAGE_NAME: fredrikfornwall/advent-of-code-server

jobs:
  check-git-ignore:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: check-git-ignore
      uses: fornwall/check-ignore@0.3

  test-rust:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust: [stable, nightly]
    steps:
    - uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: ${{ matrix.rust }}
    - name: Show rust version
      run: rustc --version
    - name: Install current LLVM
      run: sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"
    - name: Test and check (stable)
      run: LLVM_CONFIG=llvm-config-11 make check
      if: matrix.rust == 'stable'
    - name: Test and check (nightly)
      run: |
        rustup component add clippy rustfmt --toolchain nightly
        LLVM_CONFIG=llvm-config-11 make CLIPPY_NIGHTLY=1 check
      if: matrix.rust == 'nightly'
      continue-on-error: true

  test-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.9]
    steps:
    - uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@v1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Test with Python ${{ matrix.python-version }}
      run: make test-python

  test-wasm:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ '12.x', '15.x' ]
    steps:
    - uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@v1
    - uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
        registry-url: 'https://registry.npmjs.org'
    - name: Install wasm-pack
      run: make install-wasm-pack
    - name: Test with Node ${{ matrix.node-version }}
      run: make node-package

  build-python-wheels:
    env:
      CIBW_SKIP: "cp27-* cp34-* cp35-* cp36-* pp* *i686 *win32"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: hecrj/setup-rust-action@v1
      - uses: actions/setup-python@v2
        name: Setup python
        with:
          python-version: '3.8'
      - name: Install bump2version
        run: pip install bump2version
      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel setuptools_rust
      - name: Bump version
        run: bump2version patch
      - name: Build wheels on Linux and macOS
        if: runner.os != 'Windows'
        working-directory: crates/python/
        run: |
          # Fix ../core being outside of the project built by cibuildwheel:
          perl -p -i -e 's/..\/core/core/' Cargo.toml && mv ../core .
          export CIBW_BEFORE_BUILD='pip install setuptools-rust && curl -o /tmp/rustup.sh https://sh.rustup.rs && sh /tmp/rustup.sh -y'
          export CIBW_ENVIRONMENT='PATH=$HOME/.cargo/bin:$PATH'
          python -m cibuildwheel --output-dir wheelhouse
      - name: Build wheels on Windows
        if: runner.os == 'Windows'
        working-directory: crates/python/
        env:
          CIBW_BEFORE_BUILD: "python -m pip install setuptools_rust"
        run: |
          # Fix ../core being outside of the project built by cibuildwheel:
          perl -p -i -e 's/..\/core/core/' Cargo.toml
          move ..\core core
          python -m cibuildwheel --output-dir wheelhouse
      - uses: actions/upload-artifact@v2
        with:
          path: ./crates/python/wheelhouse/*.whl

  build-docker-image:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build docker image
      run: docker build --tag throwaway crates/core

  bump-version:
    needs: [test-rust, test-python, test-wasm, build-docker-image, build-python-wheels]
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
    - name: Install bump2version
      run: pip install bump2version
    - name: Setup git for commit
      run: |
        git config --global user.name 'Bump version workflow'
        git config --global user.email 'bumpversion@users.noreply.github.com'
    - name: Bump version and commit
      run: 'bump2version --commit --message "Bump version: {current_version} â†’ {new_version}\n[skip ci]" patch'
    - name: Push changes to git
      run: git push

  release-core-docker-image:
    needs: bump-version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
    - name: Install bump2version
      run: pip install bump2version
    - name: Login to docker hub
      run: docker login -u fredrikfornwall -p $DOCKER_ACCESS_TOKEN
      env:
        DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}
    - name: Build and push docker image
      run: |
        NEW_VERSION=`bump2version patch --dry-run --list | grep new_version | cut -d = -f 2`
        IMAGE=${DOCKER_IMAGE_NAME}:${NEW_VERSION}
        echo "Version: $NEW_VERSION - about to build and push ${IMAGE}"
        docker build --tag ${IMAGE} crates/core
        docker tag ${IMAGE} ${DOCKER_IMAGE_NAME}:latest
        docker push ${DOCKER_IMAGE_NAME}

  release-and-deploy-server:
    needs: bump-version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
    - name: Install bump2version
      run: pip install bump2version
    - name: Login to docker hub
      run: docker login -u fredrikfornwall -p $DOCKER_ACCESS_TOKEN
      env:
        DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}
    - name: Build and push docker image
      run: |
        NEW_VERSION=`bump2version patch --dry-run --list | grep new_version | cut -d = -f 2`
        bump2version patch
        IMAGE=${SERVER_DOCKER_IMAGE_NAME}:${NEW_VERSION}
        echo "Version: $NEW_VERSION - about to build and push ${IMAGE}"
        cd crates/server
        cp -Rf ../core core
        perl -p -i -e 's/\.\.\/core/core/' Cargo.toml
        docker build --tag ${IMAGE} .
        docker tag ${IMAGE} ${SERVER_DOCKER_IMAGE_NAME}:latest
        docker push ${SERVER_DOCKER_IMAGE_NAME}
    - name: Deploy to Fly
      uses: superfly/flyctl-actions@master
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        FLY_PROJECT_PATH: crates/server
      with:
        args: "deploy"

  deploy-cloudflare-worker:
    needs: bump-version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@v1
    - name: Deploy to Cloudflare
      env:
        CF_API_TOKEN: ${{ secrets.CLOuDFLARE_API_TOKEN }}
      run: |
        make install-wasm-pack
        sudo npm install -g @cloudflare/wrangler
        cd crates/wasm
        wrangler publish

  release-npm-packages:
    needs: bump-version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@v1
    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'
        registry-url: 'https://registry.npmjs.org'
    - uses: actions/setup-python@v2
    - name: Install bump2version
      run: pip install bump2version
    - name: Bump version
      run: bump2version patch
    - name: Publish npm packages
      run: |
        make install-wasm-pack
        . ${HOME}/.cargo/env
        make npm-publish
      env:
        # It needs to be named 'NODE_AUTH_TOKEN' as it's referenced
        # by the .npmrc created by setup-node:
        NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

  release-rust-crate:
    needs: bump-version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
    - uses: hecrj/setup-rust-action@v1
    - name: Install bump2version
      run: pip install bump2version
    - name: Bump version
      run: bump2version patch
    - name: Login to cargo
      run: cargo login ${CRATES_API_TOKEN}
      env:
        CRATES_API_TOKEN: ${{secrets.CRATES_API_TOKEN}}
    - name: Publish crate
      run: cd crates/core && cargo publish --allow-dirty

  release-pypi-package:
    needs: bump-version
    runs-on: ubuntu-latest
    steps:
    - name: Download built wheels
      uses: actions/download-artifact@v2
      with:
        name: artifact
        path: dist
    - name: List files
      run: ls -lha dist
    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
