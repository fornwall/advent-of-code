name: Github CI

on: push

jobs:
  test-rust:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust: [stable, nightly-2021-12-02]
    steps:
    - uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: ${{ matrix.rust }}
    - name: Show rust version
      run: rustc --version
    - name: Test and check (stable)
      run: |
        make COUNT_ALLOCATIONS=1 check
      if: matrix.rust == 'stable'
    - name: Test and check (nightly)
      run: |
        rustup component add clippy rustfmt --toolchain nightly-2021-12-02
        make NIGHTLY=1 check
      if: matrix.rust == 'nightly-2021-12-02'
      continue-on-error: true

  test-c-and-cxx-bindings:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
    - uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@v1
    - if: ${{ matrix.os == 'ubuntu-latest' }}
      run: sudo apt-get -y install libc6-dbg && brew install valgrind
    - run: make test-c-and-cxx-bindings

  test-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.10']
    steps:
    - uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@v1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Test with Python ${{ matrix.python-version }}
      run: make test-python

  test-wasm:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ '12.x', '17.x' ]
    steps:
    - uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@v1
    - uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
        registry-url: 'https://registry.npmjs.org'
    - name: Install wasm-opt
      run: brew install binaryen
    - name: Install wasm-bindgen
      run: make install-wasm-bindgen
    - name: Test with Node ${{ matrix.node-version }}
      run: make node-package

  build-python-wheels:
    env:
      # Note that we want to build only for a single python version
      # since we're targeting abi3. Sync changes with setup.cfg and
      # the "abi3-pyXX" PyO3 feature in Cargo.toml
      CIBW_SKIP: "cp36-* cp37-* cp39-* cp310-* pp* *i686 *win32"
      CIBW_ARCHS_LINUX: ${{matrix.arch}}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-11, windows-latest]
        arch: [x86_64, aarch64]
        exclude:
          - os: macos-11
            arch: aarch64
          - os: windows-latest
            arch: aarch64
    steps:
      - uses: actions/checkout@v2
      - uses: hecrj/setup-rust-action@v1
      - uses: actions/setup-python@v2
        name: Setup python
        with:
          python-version: '3.8'
      - uses: docker/setup-qemu-action@v1
        if: ${{ matrix.arch == 'aarch64' }}
        name: Set up QEMU
      - name: Install bump2version
        run: pip install bump2version
      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel setuptools_rust
      - name: Bump version
        run: bump2version patch
      - name: Build wheels on Linux and macOS
        if: runner.os != 'Windows'
        working-directory: crates/python/
        run: |
          # Fix ../core being outside of the project built by cibuildwheel:
          perl -p -i -e 's/..\/core/core/' Cargo.toml && mv ../core .
          rm ../../Cargo.toml
          export CIBW_BEFORE_BUILD='pip install setuptools-rust && curl -o /tmp/rustup.sh https://sh.rustup.rs && sh /tmp/rustup.sh -y'
          export CIBW_ENVIRONMENT='PATH=$HOME/.cargo/bin:$PATH'
          if [ `uname` = Darwin ]; then export CIBW_BEFORE_BUILD="$CIBW_BEFORE_BUILD && rustup target add aarch64-apple-darwin"; export CIBW_ARCHS_MACOS="universal2"; fi
          python -m cibuildwheel --output-dir wheelhouse
      - name: Build wheels on Windows
        if: runner.os == 'Windows'
        working-directory: crates/python/
        env:
          CIBW_BEFORE_BUILD: "python -m pip install setuptools_rust"
        run: |
          # Fix ../core being outside of the project built by cibuildwheel:
          perl -p -i -e 's/..\/core/core/' Cargo.toml
          rm ../../Cargo.toml
          move ..\core core
          python -m cibuildwheel --output-dir wheelhouse
      - uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: ./crates/python/wheelhouse/*.whl

  bump-version:
    needs: [test-rust, test-python, test-wasm, test-c-and-cxx-bindings, build-jni-libraries]
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
    - name: Install bump2version
      run: pip install bump2version
    - name: Setup git for commit
      run: |
        git config --global user.name 'Bump version workflow'
        git config --global user.email 'bumpversion@users.noreply.github.com'
    - name: Update gist mapping
      run: pip install requests && ./update-gists.py && git add gist-mapping.json
      working-directory: crates/wasm/site
      env:
        GIST_API_TOKEN: ${{ secrets.GIST_API_TOKEN }}
    - name: Upload new gist-mapping.json
      uses: actions/upload-artifact@v2
      with:
        name: gist-mapping
        path: crates/wasm/site/gist-mapping.json
    - name: Bump version and commit
      run: "bump2version --commit --allow-dirty patch"
    - name: Push changes to git
      run: git push

  release-core-docker-image:
    needs: bump-version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@v1
    - run: cargo install cross
    - uses: actions/setup-python@v2
    - name: Install bump2version
      run: pip install bump2version
    # https://github.com/docker/setup-qemu-action
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    # https://github.com/docker/setup-buildx-action
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to docker hub
      run: docker login -u fredrikfornwall -p $DOCKER_ACCESS_TOKEN
      env:
        DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}
    - name: Install aarch64 strip
      run: sudo apt-get -y install binutils-aarch64-linux-gnu
    - name: Build and push docker image
      working-directory: crates/core
      env:
        DOCKER_IMAGE_NAME: fredrikfornwall/advent-of-code
      run: |
        NEW_VERSION=`cd ../.. && bump2version patch --list | grep new_version | cut -d = -f 2`
        cross build --release --target aarch64-unknown-linux-musl
        cross build --release --target x86_64-unknown-linux-musl
        strip -s target/x86_64-unknown-linux-musl/release/advent-of-code
        aarch64-linux-gnu-strip -s target/aarch64-unknown-linux-musl/release/advent-of-code
        IMAGE_WITH_VERSION=${DOCKER_IMAGE_NAME}:${NEW_VERSION}
        IMAGE_WITH_LATEST=${DOCKER_IMAGE_NAME}:latest
        mkdir -p target/linux/{arm64,amd64}
        cp target/x86_64-unknown-linux-musl/release/advent-of-code target/linux/amd64/
        cp target/aarch64-unknown-linux-musl/release/advent-of-code target/linux/arm64/
        docker buildx build --push --platform linux/arm64/v8,linux/amd64 --tag ${IMAGE_WITH_VERSION} --tag ${IMAGE_WITH_LATEST} .

  publish-and-deploy-http-server:
    needs: bump-version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@v1
    - run: cargo install cross
    - uses: actions/setup-python@v2
    - name: Install bump2version
      run: pip install bump2version
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to docker hub
      run: docker login -u fredrikfornwall -p $DOCKER_ACCESS_TOKEN
      env:
        DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}
    - name: Install aarch64 strip
      run: sudo apt-get -y install binutils-aarch64-linux-gnu
    - name: Build and push docker image
      working-directory: crates/http-server
      env:
        DOCKER_IMAGE_NAME: fredrikfornwall/advent-of-code-http-server
      run: |
        NEW_VERSION=`cd ../.. && bump2version patch --list | grep new_version | cut -d = -f 2`
        cp -Rf ../core core
        perl -p -i -e 's/\.\.\/core/core/' Cargo.toml
        cross build --release --target aarch64-unknown-linux-musl
        cross build --release --target x86_64-unknown-linux-musl
        strip -s target/x86_64-unknown-linux-musl/release/advent-of-code-server
        aarch64-linux-gnu-strip -s target/aarch64-unknown-linux-musl/release/advent-of-code-server
        IMAGE_WITH_VERSION=${DOCKER_IMAGE_NAME}:${NEW_VERSION}
        IMAGE_WITH_LATEST=${DOCKER_IMAGE_NAME}:latest
        mkdir -p target/linux/{arm64,amd64}
        cp target/x86_64-unknown-linux-musl/release/advent-of-code-server target/linux/amd64/
        cp target/aarch64-unknown-linux-musl/release/advent-of-code-server target/linux/arm64/
        docker buildx build --push --platform linux/arm64/v8,linux/amd64 --tag ${IMAGE_WITH_VERSION} --tag ${IMAGE_WITH_LATEST} .
    - name: Deploy to Fly
      uses: superfly/flyctl-actions@master
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        FLY_PROJECT_PATH: crates/http-server
      with:
        args: "deploy"

  publish-and-deploy-grpc-server:
    needs: bump-version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@v1
    - run: cargo install cross
    - uses: actions/setup-python@v2
    - name: Install bump2version
      run: pip install bump2version
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to docker hub
      run: docker login -u fredrikfornwall -p $DOCKER_ACCESS_TOKEN
      env:
        DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}
    - name: Install aarch64 strip
      run: sudo apt-get -y install binutils-aarch64-linux-gnu
    - name: Build and push docker image
      working-directory: crates/grpc-server
      env:
        DOCKER_IMAGE_NAME: fredrikfornwall/advent-of-code-grpc-server
      run: |
        NEW_VERSION=`cd ../.. && bump2version patch --list | grep new_version | cut -d = -f 2`
        cp -Rf ../core core
        perl -p -i -e 's/\.\.\/core/core/' Cargo.toml
        cross build --release --target aarch64-unknown-linux-musl
        cross build --release --target x86_64-unknown-linux-musl
        strip -s target/x86_64-unknown-linux-musl/release/advent-of-code-grpc-server
        aarch64-linux-gnu-strip -s target/aarch64-unknown-linux-musl/release/advent-of-code-grpc-server
        IMAGE_WITH_VERSION=${DOCKER_IMAGE_NAME}:${NEW_VERSION}
        IMAGE_WITH_LATEST=${DOCKER_IMAGE_NAME}:latest
        mkdir -p target/linux/{arm64,amd64}
        cp target/x86_64-unknown-linux-musl/release/advent-of-code-grpc-server target/linux/amd64/
        cp target/aarch64-unknown-linux-musl/release/advent-of-code-grpc-server target/linux/arm64/
        docker buildx build --push --platform linux/arm64/v8,linux/amd64 --tag ${IMAGE_WITH_VERSION} --tag ${IMAGE_WITH_LATEST} .
    - name: Deploy to Fly
      uses: superfly/flyctl-actions@master
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        FLY_PROJECT_PATH: crates/grpc-server
      with:
        args: "deploy"

  deploy-cloudflare-worker:
    needs: bump-version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@v1
    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'
        registry-url: 'https://registry.npmjs.org'
    - name: Deploy to Cloudflare
      env:
        CF_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      run: |
        make install-wasm-bindgen
        cd crates/wasm
        npm install @cloudflare/wrangler
        npx wrangler publish

  release-npm-packages:
    needs: bump-version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@v1
    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'
        registry-url: 'https://registry.npmjs.org'
    - uses: actions/setup-python@v2
    - name: Install bump2version
      run: pip install bump2version
    - name: Bump version
      run: bump2version patch
    - name: Install wasm-opt
      run: brew install binaryen
    - name: Publish npm packages
      run: |
        make install-wasm-bindgen
        . ${HOME}/.cargo/env
        make npm-publish
      env:
        # It needs to be named 'NODE_AUTH_TOKEN' as it's referenced
        # by the .npmrc created by setup-node:
        NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

  release-rust-crate:
    needs: bump-version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
    - uses: hecrj/setup-rust-action@v1
    - name: Install bump2version
      run: pip install bump2version
    - name: Bump version
      run: bump2version patch
    - name: Login to cargo
      run: cargo login ${CRATES_API_TOKEN}
      env:
        CRATES_API_TOKEN: ${{secrets.CRATES_API_TOKEN}}
    - name: Publish crate
      run: cd crates/core && cargo publish --allow-dirty

  release-pypi-package:
    needs: [bump-version, build-python-wheels]
    runs-on: ubuntu-latest
    steps:
    - name: Download built wheels
      uses: actions/download-artifact@v2
      with:
        name: wheels
        path: dist
    - name: List files
      run: ls -lha dist
    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

  build-jni-libraries:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@v1
    - uses: actions/setup-java@v2
      with:
        distribution: 'zulu'
        java-version: '17'
    - uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
      if: runner.os == 'macOS'
    - name: List sdks
      run: xcodebuild -showsdks
      if: runner.os == 'macOS'
    - run: cargo install cross
      if: runner.os == 'Linux'
    - name: Install aarch64-apple-darwin rust target
      run: rustup target add aarch64-apple-darwin
      if: runner.os == 'macOS'
    - name: Install aarch64 strip
      run: sudo apt-get -y install binutils-aarch64-linux-gnu
      if: runner.os == 'Linux'
    - name: Build JNI libraries
      working-directory: crates/java
      run: ./build-jni-libs.sh
      shell: bash
    - name: Test java
      working-directory: crates/java/java-src
      run: gradle test
    - uses: actions/upload-artifact@v2
      with:
        name: jnilibs
        path: ./crates/java/java-src/src/main/resources/*

  publish-to-maven-central:
    needs: [bump-version]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
    - run: pip install bump2version
    - run: bump2version patch
    - uses: actions/setup-java@v2
      with:
        distribution: 'zulu'
        java-version: '17'
    - name: Download JNI libraries
      uses: actions/download-artifact@v2
      with:
        name: jnilibs
        path: crates/java/java-src/src/main/resources/
    - name: Publish to Maven Central
      working-directory: crates/java/java-src
      run: |
        echo "${{ secrets.OSSRH_GPG_SECRING_BASE64 }}" | base64 -d > secring.gpg
        gradle --info \
          -PsonatypeUsername=${{ secrets.SONATYPE_USERNAME }} \
          -PsonatypePassword=${{ secrets.SONATYPE_PASSWORD }} \
          -Psigning.keyId=6D8D0AE7 \
          -Psigning.password=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} \
          -Psigning.secretKeyRingFile=secring.gpg \
          publishToSonatype \
          closeAndReleaseSonatypeStagingRepository

  benchmark-current:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@v1
    - run: brew install valgrind
    - name: Run benchmark on current commit
      run: ./run-iai-benchmark.py > new-baseline.json
      working-directory: crates/core
    - name: Upload benchmark on current commit
      uses: actions/upload-artifact@v2
      with:
        name: new-benchmark
        path: crates/core/new-baseline.json

  benchmark-previous:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2
    - uses: hecrj/setup-rust-action@v1
    - run: brew install valgrind
    - name: Checkout previous commit
      run: git checkout HEAD~1
    - name: Run benchmark on previous commit
      run: ./run-iai-benchmark.py > old-baseline.json
      working-directory: crates/core
    - name: Upload benchmark on previous commit
      uses: actions/upload-artifact@v2
      with:
        name: old-benchmark
        path: crates/core/old-baseline.json

  compare-benchmarks:
    needs: [benchmark-current, benchmark-previous]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Download new benchmark
      uses: actions/download-artifact@v2
      with:
        name: new-benchmark
    - name: Download old benchmark
      uses: actions/download-artifact@v2
      with:
        name: old-benchmark
    - uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Format commit comment
      id: get-comment-body
      run: |
        body=$(./.github/workflows/compare-iai.py old-baseline.json new-baseline.json)
        body="${body//'%'/'%25'}"
        body="${body//$'\n'/'%0A'}"
        body="${body//$'\r'/'%0D'}"
        echo ::set-output name=body::$body
    - name: Post commit comment
      uses: peter-evans/commit-comment@v1
      with:
        body: ${{ steps.get-comment-body.outputs.body }}
    - run: ls -lha .github/workflows/

  deploy-site:
    needs: [bump-version, benchmark-current]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: nightly-2021-12-02
    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'
        registry-url: 'https://registry.npmjs.org'
    - name: Install wasm-opt
      run: brew install binaryen
    - name: Install Rust nightly
      run: make install-nightly
    - name: Install wasm-bindgen
      run: make install-wasm-bindgen
    - name: Download new gist-mapping.json
      uses: actions/download-artifact@v2
      with:
        name: gist-mapping
        path: crates/wasm/site
    - name: Download new benchmark
      uses: actions/download-artifact@v2
      with:
        name: new-benchmark
        path: crates/wasm/site/benchmark
    - name: Deploy site
      run: |
        echo "${{ secrets.SITE_DEPLOY_SSH_KEY }}" | base64 --decode > /tmp/id_ed25519
        chmod 0600 /tmp/id_ed25519
        export GIT_SSH_COMMAND='ssh -i /tmp/id_ed25519'
        git config --global user.email "ci@fornwall.net"
        git config --global user.name "CI"
        make deploy-site
    - name: Install the Netlify CLI
      run: npm install netlify-cli -g
    - name: Deploy to Netlify
      run: make netlify
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_API_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  check-seed:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@v1
    - name: Check seed
      run: cd crates/fuzzing-afl && timeout 900s ./check-seed.sh
      continue-on-error: true

  fuzz-afl:
    runs-on: ubuntu-latest
    # Allow failures as LLVM is not always available for installation:
    continue-on-error: true
    steps:
    - name: Check out source code
      uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@v1
    - name: Install current LLVM
      run: sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"
    - name: Fuzz with AFL
      run: LLVM_CONFIG=llvm-config-12 AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES=1 AFL_BENCH_UNTIL_CRASH=1 make fuzz-afl
    - name: Upload crashes found by fuzzing
      uses: actions/upload-artifact@v2
      with:
        path: ./crates/fuzzing-afl/target/fuzz-findings/default/crashes
        name: fuzzing-crashes-afl

  fuzz-libfuzzer:
    runs-on: ubuntu-latest
    steps:
    - name: Check out source code
      uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: nightly-2021-12-02
    - name: Fuzz with libfuzzer
      run: timeout 1800s make fuzz-libfuzzer
      continue-on-error: true
    - name: Upload crashes found by fuzzing
      uses: actions/upload-artifact@v2
      with:
        path: crates/fuzzing-libfuzzer/fuzz/artifacts/fuzz_target/
        name: fuzzing-crashes-libfuzzer

  fuzz-honggfuzz:
    runs-on: ubuntu-latest
    steps:
    - name: Check out source code
      uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@v1
    - name: Install honggfuzz dependencies
      run: sudo apt-get -y install build-essential binutils-dev libunwind-dev libblocksruntime-dev liblzma-dev
    - name: Fuzz with honggfuzz
      run: timeout 1800s make fuzz-hfuzz
      continue-on-error: true
      env:
        HFUZZ_RUN_ARGS: "-t 10 --exit_upon_crash"
    - name: Upload crashes found by fuzzing
      uses: actions/upload-artifact@v2
      with:
        path: crates/fuzzing-hfuzz/hfuzz_workspace/advent-of-code-fuzzing-hfuzz/*.fuzz
        name: fuzzing-crashes-honggfuzz

  coverage:
    runs-on: ubuntu-latest
    container:
      image: xd009642/tarpaulin
      options: --security-opt seccomp=unconfined
    steps:
    - uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: nightly-2021-12-02
    - name: Generate code coverage
      # What about -all-features and --workspace?
      run: cargo +nightly-2021-12-02 tarpaulin --verbose --timeout 720 --out Xml
      working-directory: crates/core
    - name: Upload to codecov.io
      uses: codecov/codecov-action@v1
      with:
        directory: crates/core

  actionlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download actionlint
        id: get_actionlint
        run: bash <(curl https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash)
      - name: Check workflow files
        run: ${{ steps.get_actionlint.outputs.executable }} -color -ignore shellcheck

  check-js:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
      - name: Check js
        run: npm install && npm run check
        working-directory: crates/wasm
